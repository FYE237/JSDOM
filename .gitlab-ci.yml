stages:     #Les etapes associés au CI/CD # Les étapes associées au projet.
  - lint    #Vérification du code
  - badges  #Création des badges
  - test    #On réalise les tests avec cypress
  - build   #On fait le minify pour construire  les pages
  - deploy  #On met les fichiers dans le dossier public

lint-html:      #Vérificaition de la qualité du code html
  stage: lint
  tags:
    - docker
  image: node
  script: 
    - npm install htmlhint
    - ./scripts/linthtml.sh #Script qui éffectue les vérifications
  artifacts:
    paths:  #Le rapport est diponible à la fin
      - linthtml_Exercice-41.html-report.out
      - linthtml_Exercice-42.html-report.out
      - linthtml.out

lint-css:      #Vérificaition de la qualité du code css
  stage: lint
  tags:
    - docker
  image: node
  script: 
    - npm install csslint-cli 
    - ./scripts/lintcss.sh  #Script qui éffectue les vérifications
  artifacts:
    paths:  #Le rapport est diponible à la fin
      - lintcss_Exercice-41.css-report.out
      - lintcss_Exercice-42.css-report.out
      - lintcss.out

lint-js:      #Vérificaition de la qualité du code js
  stage: lint
  tags:
    - docker
  image: node
  script: 
    - npm init @eslint/config 
    - ./scripts/test_js.sh  #Script qui éffectue les vérifications
  artifacts:
    paths:  #Le rapport est diponible à la fin
      - lintjs_Exercice-41.js-report.out
      - lintjs_Exercice-42.js-report.out
      - lintjs_Exercice-42-def.js-report.out
      - lintjs.out

createbadge: 
  stage: badges
  tags: 
    - docker
  image: python
  script:
    - pip install anybadge
    - ./scripts/generateBadges.sh  # Script de génération des badges
  dependencies:         # Les badges sont générés à partir des rapports s'ils sont disponibles
        - lint-html
        - lint-css
        - lint-js
  artifacts:
    paths:  # Ces fichiers sont générés par le script genereBadges.sh
    - linthtml.svg
    - lintjs.svg
    - lintcss.svg # et  mis à disposition pour mise en évidence sur la page du dépôt
  when: always    # Et quoiqu'il arrive la génération des badges devra se faire.
       
jobcypress:
  stage: test
  tags:
    - docker  # Comme on utilise une image pour isoler on doit utiliser un runner docker 
  image: cypress/base:16.18.1 # Image fournie par cypress avec ce qu'il faut
  script:
    - npm i # Installe ce qui est décrit dans package.json
    - ./node_modules/.bin/serve & # Lance le serveur
    - npx cypress run # Lance les tests
    - kill -9 $(ps | grep node | awk '{print $1}') # Cette ligne pourrait permettre de tuer serve
  artifacts:
      paths:
        - cypress/videos

minify:
    stage: build    #On build les pages
    tags:
        - docker
    image: node
    script:
        - npm install minify
        - ./scripts/build.sh
    artifacts:                # Le rapport sera disponible pour d'autres jobs
        paths:
        - build

pages: 
    stage: deploy
    script:
        - mkdir -p public # Création du répertoire public
        - cp -r build/* public/
    artifacts:        # Le rapport sera disponible pour d'autres jobs
        paths:
            - public
    dependencies:
        - minify


#Les pages sont déployées ici : https://grenoble-inp-ensimag.gitlab.io/4MMCAW6/G3/TP3_JSDOM/TP3JSDOM_emmanuel_fezeu_youmbi/